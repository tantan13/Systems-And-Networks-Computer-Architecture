{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc3\levelnfcn3\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{upper-latin\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\deftab720
\pard\tx720\pardeftab720\sl300\sa266\partightenfactor0

\f0\fs26\fsmilli13333 \cf2 Napa (Tan) Vananupong\
Project 5 Short Answers:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	A.	}\expnd0\expndtw0\kerning0
How does the protocol implemented in this project ensure that the entirety of a message is received by the other end, even if packets are lost? \
\ls1\ilvl0\kerning1\expnd0\expndtw0 		The protocol implemented in this project ensures the entirety of a message is received by the other end by using the checksum method. The checksum message makes sure that the total buffers added up are equal to the correct sum (of the entire message), so if the checksum is valid, its an ACK that is received and you know that the entirety of the message was received. If the checksum is invalid, the packet sent is marked as NACK and the last packet\'92s data type is set to LAST_DATA instead, which means that it keeps sending the last data and the message is repeatedly sent until the ACK is received. So even if the packets are lost like in NACK, it\'92ll keep resending the packets that were lost till they are there an we get the entirety of the message. \expnd0\expndtw0\kerning0
\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0    B. \expnd0\expndtw0\kerning0
What is the benefit of dividing a message over multiple packets rather than sending it as a single packet? \uc0\u8232 \
		The benefit of dividing a message over multiple packets rather than sending it as a single packet is that if we send the entire message as a single packet the message sizes we send each time could be different, so if we divide the message into smaller pieces, we could make sure that the sizes and process are standardized. Furthermore, dividing the packets into smaller packets to send helps prevent packet loss and corruption of the packets because if you do get a data corruption while sending a packet, its easier to deal with that if the packet is small since you have less data to keep resending. The network also has physical limits to packet sizes, so sometimes we have to divide the message into multiple packets anyway to fit the limit. Lastly, its faster to send smaller packets because you need less bandwidth. \
		\
\ls1\ilvl0\kerning1\expnd0\expndtw0   C. \expnd0\expndtw0\kerning0
How might you improve the protocol implemented in this project in order to finish sending messages more quickly? (Note: You implemented a transport layer protocol in this project. You cannot suggest an improvement to a different layer, such as improving the bitrate.) \uc0\u8232 \
		One way we could make the protocol in the project faster is by sending multiple packets at a time instead of one at a time like it is doing in the implementation. This would allow us to finish sending messages more quickly.  Another thing we could do is to change the protocol from the transport layer protocol to a type of pipelined protocol like the Reliable Pipelined Protocol described in the textbook. This is because if we are not using a pipelined protocol, there is a lot of time wasted time in the network while the network is waiting for the ACK to arrive, otherwise known as dead time, which is defined as the time that the network has no activity. To help with this problem, we can use a pipelined protocol to pipeline the sending of packets and reception of ACKS. This means that the source will send a set of packets (as opposed to just one) before expecting an acknowledgement.  The destination still acknowledges each individual packet like before but the difference is that the sender no longer has to wait for all the ACKS of for all the data packets before it can send another one again, which will speed up our process of sending messages.\
\
}